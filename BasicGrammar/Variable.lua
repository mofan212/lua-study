--[[ 
    1、变量在使用前需要进行声明
    2、Lua 中有全局变量、局部变量和表中的域三种类型的变量
    3、Lua 中的变量全是全局变量，哪怕是语句块或是函数里，除非用 local 显式声明为局部变量
    4、局部变量的作用域为从声明位置开始到所在语句块结束
    5、变量的默认值均为 nil
 ]]
 a = 5
 local b = 5
 
 local function joke()
     C = 5
     local d = 6
 end
 
 print(C, d) -- nil nil
 
 joke()
 print(C, d) -- 5 nil
 
 do
     local a = 6
     b = 6
     print(a, b) -- 6 6
 end
 
 print(a, b) -- 5 6
print("---------------- ")

-- 赋值
--[[ 
    1、Lua 可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量
    2、遇到赋值语句 Lua 会先计算右边所有的值然后再执行赋值操作，因此可以很简单地进行变量交换
    3、当变量的个数大于值的个数时，按变量个数补足 nil
    4、当变量的个数小于值的个数时，多余的值会被忽略
    5、Lua 对多个变量同时赋值，不会进行变量传递，仅做值传递
 ]]

local a, b, c = 0, 1
print(a, b, c) -- 0 1 nil

a, b = a + 1, b + 1, b + 2
print(a, b) -- 1 2

a, b, c = 0
print(a, b, c) -- 0 nil nil
print("---------------- ")
--[[ 
    1、多值赋值经常用来交换变量，或将函数调用返回给变量，比如： 
            a, b = f()
        f()返回两个值，第一个赋给 a，第二个赋给 b
    2、尽可能的使用局部变量。这样可以避免命名冲突，同时访问局部变量的速度比全局变量更快
 ]]

-- 索引
-- 使用索引获取 table 对应的值时，除了可以使用 `[]`，还可以使用 `.`
local site = {}
site["k"] = "mofan"
print(site["k"])
print(site.k)